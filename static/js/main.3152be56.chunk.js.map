{"version":3,"sources":["app.tsx","index.tsx"],"names":["anim","vals","time","step","length","delta","alpha","ease","pi","Math","PI","pts2","_ref","_ref2","r1","r2","_ref3","Object","slicedToArray","x1","y1","_ref4","x2","y2","d","hypot","a","h","sqrt","ReactDOM","render","react_default","createElement","canvasRef","useRef","useEffect","current","canvas","ctx","getContext","translate","line","from","to","moveTo","lineTo","api","start","Date","now","input","_ref5","value","_ref6","cx","cy","cos","sin","c1","c2","c3","run","requestAnimationFrame","clearRect","width","height","strokeStyle","beginPath","p1","p2","stroke","ref","document","getElementById"],"mappings":"2NAIMA,SAAO,SAACC,EAAgBC,GAC5B,IAAMC,IAASD,EAAOD,EAAKG,OACrBC,EAAQH,EAAO,EACrB,GAAIG,EAAQ,GACV,OAAOJ,EAAKE,GAEZ,IAAMG,GAASD,EAAK,IAPJ,GASVE,EAAOD,EAAQA,GAAS,EAAI,EAAIA,GACtC,OAAOL,EAAKE,IAAS,EAAII,GAAQN,GAAME,EAAO,GAAKF,EAAKG,QAAUG,IAgBhEC,EAAKC,KAAKC,GAEVC,EAAO,SAAAC,EAAAC,EAAmCC,EAAYC,GAAsB,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAAnEO,EAAmEH,EAAA,GAA/DI,EAA+DJ,EAAA,GAAAK,EAAAJ,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAAlDS,EAAkDD,EAAA,GAA9CE,EAA8CF,EAAA,GAE1EG,EAAIf,KAAKgB,MAAMN,EAAKG,EAAIF,EAAKG,GAC7BG,GAAKZ,EAAKA,EAAKC,EAAKA,EAAKS,EAAIA,GAAK,EAAIA,EACtCG,EAAIlB,KAAKmB,KAAKd,EAAKA,EAAKY,EAAIA,GAGlC,MAAO,CAFIP,EAAKO,GAAKJ,EAAKH,GAAMK,EAEnBG,GAAKJ,EAAKH,GAAMI,EADlBJ,EAAKM,GAAKH,EAAKH,GAAMI,EACKG,GAAKL,EAAKH,GAAMK,IChCvDK,IAASC,OAAOC,EAAAL,EAAAM,cD4Ca,WAC3B,IAAMC,EAAYC,iBAA0B,MA+C5C,OA9CAC,oBAAU,WACR,GAAKF,EAAUG,QAAf,CACA,IAAMC,EAASJ,EAAUG,QACnBE,EAAMD,EAAOE,WAAW,MAC9B,GAAKD,EAAL,CAEAA,EAAIE,UAAU,GAAK,IANL,IAOPC,EAlBC,SAACH,GACX,MAAO,CACLG,KAAM,SAACC,EAAaC,GAClBL,EAAIM,OAAOF,EAAK,GAAIA,EAAK,IACzBJ,EAAIO,OAAOF,EAAG,GAAIA,EAAG,MAcRG,CAAIR,GAAZG,KACDM,EAAQC,KAAKC,MAIbC,EAAQ,SAAAC,EAAkBC,GAAyB,IAAAC,EAAApC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GAAzCG,EAAyCD,EAAA,GAArCE,EAAqCF,EAAA,GACjD/C,GAAS8C,EAAQ,IAAO5C,EAAK,EAAIA,EAAK,EAC5C,MAAO,CAAC8C,EAJE,GAIG7C,KAAK+C,IAAIlD,GAAciD,EAJ1B,GAI+B9C,KAAKgD,IAAInD,KAE9CoD,EAAY,CAAC,IAAK,IAClBC,EAAY,CAAC,IAAK,KAGlBC,EAAYjD,EAAK+C,EAAIC,EAFhB,OAuBX,OApBAC,EAAG,IAFQ,GAGC,SAANC,IAAM,OAAMC,sBAAsB,WACtC,IAAM5D,GAAQ8C,KAAKC,MAAQF,GAAS,IACpCT,EAAIyB,UAAU,EAAG,EAAG1B,EAAO2B,MAAO3B,EAAO4B,QACzC3B,EAAI4B,YAAc,OAClB5B,EAAI6B,YACJ,IAAMrD,EAAKoC,EAAMQ,EAAI1D,EAAK,CAAC,EAAG,EAAG,EAAG,GAAIE,IACxCuC,EAAKiB,EAAI5C,GACT,IAAMC,EAAKmC,EAAMS,EAAI3D,EAAK,CAAC,EAAG,EAAG,EAAG,GAAIE,IACxCuC,EAAKkB,EAAI5C,GACT,IAAMqD,EAAKzD,EAAKG,EAAIC,EAbX,OAcT0B,EAAK3B,EAAIsD,GACT3B,EAAK1B,EAAIqD,GACT,IAAMC,EAAK1D,EAAKyD,EAAIR,EAfX,GAemB,IAC5BnB,EAAK2B,EAAIC,GACT5B,EAAKmB,EAAIS,GACT/B,EAAIgC,SACJT,MAEFA,GACO,iBAKF9B,EAAAL,EAAAM,cAAA,UAAQuC,IAAKtC,EAAW+B,MAAO,IAAKC,OAAQ,OC5FrC,MAASO,SAASC,eAAe","file":"static/js/main.3152be56.chunk.js","sourcesContent":["import './app.css';\nimport React, {useRef, useEffect} from 'react';\n\nconst switchRatio = 0.4;\nconst anim = (vals: number[], time: number) => {\n  const step = ~~time % vals.length;\n  const delta = time % 1;\n  if (delta < 1 - switchRatio) {\n    return vals[step];\n  } else {\n    const alpha = (delta - (1 - switchRatio)) / switchRatio;\n    // https://stackoverflow.com/questions/13462001/ease-in-and-ease-out-animation-formula\n    const ease = alpha * alpha * (3 - 2 * alpha);\n    return vals[step] * (1 - ease) + vals[(step + 1) % vals.length] * ease;\n  }\n};\n// const combine = <O extends any>(o: {[K in keyof O]: (time: number) => O[K]}) => (time: number): O => {\n//   return Object.keys(o).reduce((res, key) => ({...res, [key]: o[key](time)}), {} as O);\n// };\ninterface Compose {\n  <A, B, C>(f: (a: A) => B, g: (b: B) => C): (a: A) => C\n  <A, B, C, D>(f: (a: A) => B, g: (b: B) => C, h: (c: C) => D): (a: A) => D\n}\nconst compose = ((...fns: ((arg: any) => any)[]) => (arg: any): any => {\n  return fns.reduce((res, fn) => fn(res), arg);\n}) as Compose;\n\ntype Point = [number, number]\n\nconst pi = Math.PI;\n\nconst pts2 = ([x1, y1]: Point, [x2, y2]: Point, r1: number, r2: number): Point => {\n  // https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n  const d = Math.hypot(x1 - x2, y1 - y2);\n  const a = (r1 * r1 - r2 * r2 + d * d) / 2 / d;\n  const h = Math.sqrt(r1 * r1 - a * a);\n  const x3 = x1 + a * (x2 - x1) / d;\n  const y3 = y1 + a * (y2 - y1) / d;\n  return [x3 + h * (y2 - y1) / d, y3 - h * (x2 - x1) / d];\n};\n\nconst api = (ctx: CanvasRenderingContext2D) => {\n  return {\n    line: (from: Point, to: Point): void => {\n      ctx.moveTo(from[0], from[1]);\n      ctx.lineTo(to[0], to[1]);\n    },\n  }\n};\n\nexport const App: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    // https://stackoverflow.com/questions/8696631/canvas-drawings-like-lines-are-blurry\n    ctx.translate(0.5, 0.5);\n    const {line} = api(ctx);\n    const start = Date.now();\n    let timer: number | null = null;\n    const rod = 50;\n    const dist = 50;\n    const input = ([cx, cy]: Point, value: number): Point => {\n      const alpha = (value - 0.5) * pi / 6 + pi / 2;\n      return [cx - Math.cos(alpha) * rod, cy - Math.sin(alpha) * rod];\n    };\n    const c1: Point = [100, 60];\n    const c2: Point = [100, 60 + dist];\n    const d1 = 30;\n    const d2 = 10;\n    const c3: Point = pts2(c1, c2, d1, d1);\n    c3[0] += d2;\n    const run = () => requestAnimationFrame(() => {\n      const time = (Date.now() - start) / 2000;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.strokeStyle = '#fff';\n      ctx.beginPath();\n      const r1 = input(c1, anim([0, 1, 1, 0], time));\n      line(c1, r1);\n      const r2 = input(c2, anim([0, 0, 1, 1], time));\n      line(c2, r2);\n      const p1 = pts2(r1, r2, d1, d1);\n      line(r1, p1);\n      line(r2, p1);\n      const p2 = pts2(p1, c3, d2, 50);\n      line(p1, p2);\n      line(c3, p2);\n      ctx.stroke();\n      run();\n    });\n    run();\n    return () => {\n      timer && cancelAnimationFrame(timer);\n    };\n  });\n  // https://stackoverflow.com/questions/8696631/canvas-drawings-like-lines-are-blurry\n  return <canvas ref={canvasRef} width={300} height={300} />;\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}